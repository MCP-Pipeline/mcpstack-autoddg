[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "mcpstack-autoddg"
dynamic = ["version"]
description = "MCPStack tool exposing the AutoDDG dataset description workflow"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [{ name = "Provost Simon", email = "s.g.provost@kent.ac.uk" }]
keywords = ["mcp", "mcpstack", "autoddg", "dataset", "description"]
dependencies = [
  "typer>=0.9.0",
  "beartype>=0.21.0",
  "rich>=13.0.0",
  "rich-argparse>=1.4.0",
  "rich-pyfiglet>=1.0.0",
  "click>=8.1.8",
  "mcpstack>=0.0.2",
  "pandas>=2.2.0",
  "autoddg",
]

[dependency-groups]
dev = [
  "pytest>=7.4",
  "ruff>=0.4.0",
  "pre-commit>=3.0.0"
]

# Let MCPStack discover external tools via entry points
[project.entry-points."mcpstack.tools"]
autoddgtool = "mcpstack_autoddg.tool:AutoDDGTool"

# Let MCPStack discover tool-specific CLIs (mounted by the mother library)
[project.entry-points."mcpstack.tool_clis"]
autoddgtool = "mcpstack_autoddg.cli:AutoDDGCLI.get_app"

[tool.ruff]
line-length = 88
target-version = "py310"
src = ["src"]

[tool.ruff.lint]
select = ["E","W","F","I","UP","RUF","B","C4"]
ignore = ["E501"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]

[tool.uv.sources]
autoddg = { path = "../../../NYU/AutoDDG" }
